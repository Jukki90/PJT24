package com.example.fw;

import static com.example.fw.ContactHelper.CREATION;

import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import com.example.tests.GroupData;
import com.example.tests.TestBase;
import com.example.tests.UserData;
import com.example.utils.SortedListOf;
import java.util.Random;

public class ContactHelper extends HelperBase {
	public static boolean CREATION=true;
	public static boolean MODIFICATION=false;
	
	public ContactHelper(ApplicationManager manager) {
		super(manager);
	}
	
	//------High-level methods--------------------------------------------
	
	public SortedListOf<UserData> cachedContacts; 
		
		public SortedListOf<UserData> getContacts() {
			if (cachedContacts == null){
				rebuildCache();
			}
			return cachedContacts;
		}
	
	
	private void rebuildCache(){
		cachedContacts= new SortedListOf<UserData>();  
		
		  WebElement table = driver.findElement(By.id("maintable")); 
		// Now get all the TR elements from the table  
		  List<WebElement> allRows = table.findElements(By.xpath("//tr[@name='entry']")); 

		  // And iterate over them, getting the cells 
		  for (WebElement row : allRows) {
			  UserData contact = new UserData();
			  
		   List<WebElement> cells = row.findElements(By.tagName("td")); 
		   	contact.id=cells.get(0).getText();
		   	contact.lastName=cells.get(1).getText();
		   	contact.firstName=cells.get(2).getText();
		   	contact.email=cells.get(3).getText();
		   	contact.mobilePhone=cells.get(4).getText();
		   	cachedContacts.add(contact);
		    } 
	}
	
	
	public ContactHelper createContact(UserData user) {
		
		addNewUser();
	    fillUserAttributes(user, CREATION);
	    submitContactCreation();
	    returnToHomePage();
	    rebuildCache();
	    return this;
	}
	
	public ContactHelper modifyContact(int index,UserData user){
		initContactModification(index);
		user.firstName="‚ÂÍ‚"; //should change
		user.lastName="ÔÔÔÔ";
		fillUserAttributes(user,false);
		SubmitContactModification();
		returnToHomePage();
		rebuildCache();
		return this;
		
	}
	
	public ContactHelper removeContact(int index, UserData user){
		deleteContact(index);
		returnToHomePage();
		rebuildCache();
		return this;
	}
	

	
	
	//------Low-level methods--------------------------------------------

	public ContactHelper fillUserAttributes(UserData user, boolean formType) {
		type(By.name("firstname"), user.firstName);
		type(By.name("lastname"), user.lastName);
		type(By.name("address"), user.address);
		type(By.name("home"), user.homePhone);
		type(By.name("mobile"), user.mobilePhone);
		type(By.name("email"), user.email);
		type(By.name("byear"), user.birthYear);
		type(By.name("address2"), user.address2);

		selectByText(By.name("bday"), user.birthDay);
		selectByText(By.name("bmonth"), user.birthMonth);

		selectByText(By.name("new_group"), user.group);
		
		if (formType==CREATION){
			
		}else{
			if (driver.findElements(By.name("new_group")).size()!=0){
				throw new Error("Group selector exists in contact modification form");
			}
		}
		return this;
	}

	public ContactHelper addNewUser() {
		click(By.linkText("add new"));
		return this;
	}

	public ContactHelper deleteContact(int index) {
		initContactModification(index);
		click(By.xpath("//input[@value='Delete']"));
		return this;

	}

	public ContactHelper SubmitContactModification() {
		click(By.xpath("//input[@value='Update']"));
		return this;
	}

	public ContactHelper initContactModification(int index) {
		++index;
		click(By.xpath("(//img[@alt='Edit'])[" + index + "]"));
		return this;
	}

	public ContactHelper returnToHomePage() {
		click(By.linkText("home page"));
		return this;
	}

	public ContactHelper submitContactCreation() {
		driver.findElement(By.name("submit")).click();
		return this;
	}

	
		
		

}
